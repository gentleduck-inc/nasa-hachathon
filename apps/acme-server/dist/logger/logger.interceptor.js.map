{"version":3,"sources":["../../src/logger/logger.interceptor.ts"],"sourcesContent":["import { type CallHandler, type ExecutionContext, Inject, Injectable, type NestInterceptor } from '@nestjs/common'\nimport { WINSTON_MODULE_NEST_PROVIDER, type WinstonLogger } from 'nest-winston'\nimport { type Observable, tap } from 'rxjs'\nimport type { LoggerService } from './logger.service'\n\n@Injectable()\nexport class LoggerInterceptor implements NestInterceptor {\n  constructor(\n    @Inject(WINSTON_MODULE_NEST_PROVIDER)\n    private readonly logger: WinstonLogger,\n    private readonly meta: LoggerService,\n  ) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const req = context.switchToHttp().getRequest()\n    const { method, url } = req\n    const now = Date.now()\n    const metadata = this.meta.getRequestMetadata(req)\n\n    return next.handle().pipe(\n      tap(() => {\n        const delay = Date.now() - now\n        this.logger.log({\n          context: 'HTTP',\n          delay,\n          message: `${method} ${url} - ${delay}ms`,\n          method,\n          url,\n          ...metadata,\n        })\n      }),\n    )\n  }\n}\n"],"names":["LoggerInterceptor","intercept","context","next","req","switchToHttp","getRequest","method","url","now","Date","metadata","meta","getRequestMetadata","handle","pipe","tap","delay","logger","log","message"],"mappings":";;;;+BAMaA;;;eAAAA;;;wBANqF;6BACjC;sBAC5B;;;;;;;;;;;;;;;AAI9B,IAAA,AAAMA,oBAAN,MAAMA;IAOXC,UAAUC,OAAyB,EAAEC,IAAiB,EAAmB;QACvE,MAAMC,MAAMF,QAAQG,YAAY,GAAGC,UAAU;QAC7C,MAAM,EAAEC,MAAM,EAAEC,GAAG,EAAE,GAAGJ;QACxB,MAAMK,MAAMC,KAAKD,GAAG;QACpB,MAAME,WAAW,IAAI,CAACC,IAAI,CAACC,kBAAkB,CAACT;QAE9C,OAAOD,KAAKW,MAAM,GAAGC,IAAI,CACvBC,IAAAA,SAAG,EAAC;YACF,MAAMC,QAAQP,KAAKD,GAAG,KAAKA;YAC3B,IAAI,CAACS,MAAM,CAACC,GAAG,CAAC;gBACdjB,SAAS;gBACTe;gBACAG,SAAS,GAAGb,OAAO,CAAC,EAAEC,IAAI,GAAG,EAAES,MAAM,EAAE,CAAC;gBACxCV;gBACAC;gBACA,GAAGG,QAAQ;YACb;QACF;IAEJ;IAzBA,YACE,AACiBO,MAAqB,EACtC,AAAiBN,IAAmB,CACpC;aAFiBM,SAAAA;aACAN,OAAAA;IAChB;AAsBL"}