{"version":3,"sources":["../../src/chats/chats.gateway.ts"],"sourcesContent":["import { UseFilters } from '@nestjs/common'\nimport {\n  ConnectedSocket,\n  MessageBody,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  OnGatewayInit,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets'\nimport { Server, Socket } from 'socket.io'\nimport { ZodError } from 'zod'\nimport { WSErrorExceptionFilter } from '~/common/exceptions'\nimport { throwWSError } from '~/common/libs'\nimport { ZodValidationPipe } from '~/common/pipes'\nimport { connectChatQuerySchema, MessageCreateSchema, messageCreateSchema } from './chats.dto'\nimport { ChatsService } from './chats.service'\nimport { ChatsErrorType, WSSession } from './chats.types'\nimport { AIService } from '~/ai'\nimport OpenAI from 'openai'\n\n@WebSocketGateway({\n  cors: {\n    origin: '*',\n    credentials: true,\n  },\n  namespace: '/',\n})\nexport class ChatsGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {\n  @WebSocketServer() server: Server | undefined\n  private userSockets = new Map<\n    string, // client.id\n    { userId: string; chatId: string }\n  >()\n\n  constructor(\n    private readonly chatsService: ChatsService,\n    private readonly aiService: AIService,\n  ) {}\n\n  async afterInit(server: Server) {\n    this.server = server\n    console.log('‚úÖ WebSocket server initialized')\n  }\n\n  @UseFilters(new WSErrorExceptionFilter())\n  handleConnection(@ConnectedSocket() client: Socket & WSSession) {\n    // console.log(client.handshake)\n    // if (!client.handshake.session.user) {\n    //   return throwWSError<ChatsErrorType>('SOCKET_UNAUTHORIZED')\n    // }\n    try {\n      const data = connectChatQuerySchema.parse(client.handshake.query)\n\n      client.join(data.chatId)\n      this.userSockets.set(client.id, {\n        userId: data.userId,\n        chatId: data.chatId,\n      })\n      console.log(`‚úÖ ${data.userId} joined room ${data.chatId}`)\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return throwWSError<ChatsErrorType>('SOCKET_QUERY_PARSING_ERROR')\n      }\n      return throwWSError<ChatsErrorType>('SOCKET_CONNECTION_ERROR')\n    }\n  }\n\n  handleDisconnect(@ConnectedSocket() client: Socket) {\n    const meta = this.userSockets.get(client.id)\n    if (meta) {\n      console.log(`‚ùå ${meta.userId} disconnected from room ${meta.chatId}`)\n    } else {\n      console.log(`‚ùå Unknown client ${client.id} disconnected`)\n    }\n    this.userSockets.delete(client.id)\n  }\n\n  @SubscribeMessage('message')\n  async handleMessage(\n    @ConnectedSocket() client: Socket,\n    @MessageBody(new ZodValidationPipe(messageCreateSchema)) payload: MessageCreateSchema,\n  ) {\n    const meta = this.userSockets.get(client.id)\n    if (!meta) {\n      throw throwWSError<ChatsErrorType>('SOCKET_AUTHENTICATION_ERROR')\n    }\n\n    const message = await this.chatsService.create(payload)\n    const { chatId, userId } = meta\n\n    client.to(chatId).emit('message', message)\n\n    console.log(`üì© ${userId} sent: \"${payload.content}\" in room ${chatId}`)\n\n    const model = this.aiService.getService('chatGPT')\n    const hay = await model.getAnswerStream('tell me about love', 'gemini-2.0-flash', (chunk) => {\n      console.log(chunk)\n    })\n  }\n\n  @SubscribeMessage('history')\n  async handleHistory(@MessageBody() payload: { chatId: string }, @ConnectedSocket() client: Socket) {\n    console.log('getting history')\n    const chatHistory = await this.chatsService.getHistory({\n      chatId: payload.chatId,\n      cursor: 0,\n      limit: 50,\n    })\n    client.emit('history', chatHistory)\n  }\n}\n\n/**\n * -[x] HANDLE CONNECTION\n * -[x] HANDLE AUTH\n * -[x] HANDLE ROOMS\n * -[x] HANDLE MESSAGES\n * -[x] HANDLE USERS\n * -[ ] HANDLE ATTACHMENTS\n * -[ ] HANDLE MESSAGE DELIVERY\n * -[ ] HANDLE AI MESSAGES\n */\n"],"names":["ChatsGateway","afterInit","server","console","log","handleConnection","client","data","connectChatQuerySchema","parse","handshake","query","join","chatId","userSockets","set","id","userId","error","ZodError","throwWSError","handleDisconnect","meta","get","delete","handleMessage","payload","message","chatsService","create","to","emit","content","model","aiService","getService","hay","getAnswerStream","chunk","handleHistory","chatHistory","getHistory","cursor","limit","Map","WSErrorExceptionFilter","ZodValidationPipe","messageCreateSchema","cors","origin","credentials","namespace"],"mappings":"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"}