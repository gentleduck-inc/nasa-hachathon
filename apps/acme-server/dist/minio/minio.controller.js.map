{"version":3,"sources":["../../src/minio/minio.controller.ts"],"sourcesContent":["import { Controller, Get, Param, Post, Res, UploadedFile, UseInterceptors } from '@nestjs/common'\nimport { FileInterceptor } from '@nestjs/platform-express'\nimport type { Response } from 'express'\nimport type { ResponseType } from '~/common/types'\nimport type { MinioMessage } from './minio.constants'\nimport type { MinioService } from './minio.service'\n\n@Controller('upload')\nexport class MinioController {\n  constructor(private readonly minioService: MinioService) {}\n\n  @Post()\n  @UseInterceptors(FileInterceptor('file'))\n  async upload(\n    @UploadedFile() file: any,\n  ): Promise<ResponseType<Awaited<ReturnType<typeof this.minioService.uploadFile>>, typeof MinioMessage>> {\n    const path = await this.minioService.uploadFile(file.originalname, file.buffer, file.mimetype)\n    return { data: path, message: 'MINIO_FILE_UPLOAD_SUCCESS', state: 'success' }\n  }\n\n  @Get(':filename')\n  async download(@Param('filename') filename: string, @Res() res: Response) {\n    const fileStream = await this.minioService.getFile(filename)\n    fileStream?.pipe(res)\n  }\n}\n"],"names":["MinioController","upload","file","path","minioService","uploadFile","originalname","buffer","mimetype","data","message","state","download","filename","res","fileStream","getFile","pipe"],"mappings":";;;;+BAQaA;;;eAAAA;;;wBARoE;iCACjD;;;;;;;;;;;;;;;AAOzB,IAAA,AAAMA,kBAAN,MAAMA;IAGX,MAEMC,OACJ,AAAgBC,IAAS,EAC6E;QACtG,MAAMC,OAAO,MAAM,IAAI,CAACC,YAAY,CAACC,UAAU,CAACH,KAAKI,YAAY,EAAEJ,KAAKK,MAAM,EAAEL,KAAKM,QAAQ;QAC7F,OAAO;YAAEC,MAAMN;YAAMO,SAAS;YAA6BC,OAAO;QAAU;IAC9E;IAEA,MACMC,SAAS,AAAmBC,QAAgB,EAAE,AAAOC,GAAa,EAAE;QACxE,MAAMC,aAAa,MAAM,IAAI,CAACX,YAAY,CAACY,OAAO,CAACH;QACnDE,YAAYE,KAAKH;IACnB;IAfA,YAAY,AAAiBV,YAA0B,CAAE;aAA5BA,eAAAA;IAA6B;AAgB5D"}