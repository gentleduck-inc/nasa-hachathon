{"version":3,"sources":["../../src/email/email.service.ts"],"sourcesContent":["import otpGenerator from 'otp-generator'\nimport { Inject, Injectable } from '@nestjs/common'\nimport * as nodemailer from 'nodemailer'\nimport { DrizzleAsyncProvider, schema } from '~/drizzle'\nimport { NodePgDatabase } from 'drizzle-orm/node-postgres'\nimport fs from 'node:fs'\nimport { render } from '@react-email/components'\nimport WelcomeEmail from 'emails/welcome'\nimport { renderEmailTemplate } from './emails'\n\n@Injectable()\nexport class EmailService {\n  constructor(\n    @Inject(DrizzleAsyncProvider)\n    private db: NodePgDatabase<typeof schema>,\n  ) {}\n\n  private transporter = nodemailer.createTransport({\n    host: 'localhost',\n    port: 1025,\n    secure: false,\n    tls: {\n      rejectUnauthorized: false, // optional\n    },\n  })\n  async generateOTP({ user_id }: { user_id: string }) {\n    try {\n      const OTP = otpGenerator.generate(6, {\n        upperCaseAlphabets: false,\n        specialChars: false,\n        lowerCaseAlphabets: false,\n      })\n      const expires_at = new Date(Date.now() + 60000 * 10) // Expires after 10 minutes\n      // const otp = await this.db.\n\n      // const tp = await prisma.otp.create({\n      //   data: {\n      //     user_id,\n      //     otp: OTP,\n      //     expires_at,\n      //   },\n      // })\n      //\n      // if (!tp) return { otp: null }\n      //\n      // return { otp: OTP }\n    } catch (error) {\n      return { otp: null }\n    }\n  }\n\n  async sendTestEmail(to: string) {\n    // const html = await render(require('./views/welcome.view').default, { code: 'hello world' })\n    const html = await renderEmailTemplate('welcome', { name: 'Ahmed' })\n    console.log(html)\n    //\n    // console.log(emailHtml)\n    // console.log(require('./views/welcome.view'))\n    //   await this.transporter.sendMail({\n    //     from: '\"App Bot\" <no-reply@example.com>',\n    //     to,\n    //     subject: 'Hello from NestJS',\n    //     text: 'This is a test email sent via MailHog SMTP!',\n    //     html: html,\n    //   })\n    // }\n    // async sendTestEmail(to: string) {\n    //   await this.mailerService.sendMail({\n    //     to: 'john@domain.com',\n    //     subject: 'Testing react template',\n    //     template: 'welcome',\n    //     context: {\n    //       code: '123456',\n    //       name: 'John Doe',\n    //     },\n    //   })\n    //\n    //   return 'Mail sent!'\n  }\n}\n"],"names":["EmailService","generateOTP","user_id","OTP","otpGenerator","generate","upperCaseAlphabets","specialChars","lowerCaseAlphabets","expires_at","Date","now","error","otp","sendTestEmail","to","html","renderEmailTemplate","name","console","log","db","transporter","nodemailer","createTransport","host","port","secure","tls","rejectUnauthorized"],"mappings":";;;;+BAWaA;;;eAAAA;;;qEAXY;wBACU;oEACP;yBACiB;8BACd;wBAIK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAG7B,IAAA,AAAMA,eAAN,MAAMA;IAcX,MAAMC,YAAY,EAAEC,OAAO,EAAuB,EAAE;QAClD,IAAI;YACF,MAAMC,MAAMC,qBAAY,CAACC,QAAQ,CAAC,GAAG;gBACnCC,oBAAoB;gBACpBC,cAAc;gBACdC,oBAAoB;YACtB;YACA,MAAMC,aAAa,IAAIC,KAAKA,KAAKC,GAAG,KAAK,QAAQ,IAAI,2BAA2B;;QAChF,6BAA6B;QAE7B,uCAAuC;QACvC,YAAY;QACZ,eAAe;QACf,gBAAgB;QAChB,kBAAkB;QAClB,OAAO;QACP,KAAK;QACL,EAAE;QACF,gCAAgC;QAChC,EAAE;QACF,sBAAsB;QACxB,EAAE,OAAOC,OAAO;YACd,OAAO;gBAAEC,KAAK;YAAK;QACrB;IACF;IAEA,MAAMC,cAAcC,EAAU,EAAE;QAC9B,8FAA8F;QAC9F,MAAMC,OAAO,MAAMC,IAAAA,2BAAmB,EAAC,WAAW;YAAEC,MAAM;QAAQ;QAClEC,QAAQC,GAAG,CAACJ;IACZ,EAAE;IACF,yBAAyB;IACzB,+CAA+C;IAC/C,sCAAsC;IACtC,gDAAgD;IAChD,UAAU;IACV,oCAAoC;IACpC,2DAA2D;IAC3D,kBAAkB;IAClB,OAAO;IACP,IAAI;IACJ,oCAAoC;IACpC,wCAAwC;IACxC,6BAA6B;IAC7B,yCAAyC;IACzC,2BAA2B;IAC3B,iBAAiB;IACjB,wBAAwB;IACxB,0BAA0B;IAC1B,SAAS;IACT,OAAO;IACP,EAAE;IACF,wBAAwB;IAC1B;IAlEA,YACE,AACQK,EAAiC,CACzC;aADQA,KAAAA;aAGFC,cAAcC,YAAWC,eAAe,CAAC;YAC/CC,MAAM;YACNC,MAAM;YACNC,QAAQ;YACRC,KAAK;gBACHC,oBAAoB;YACtB;QACF;IATG;AAgEL"}