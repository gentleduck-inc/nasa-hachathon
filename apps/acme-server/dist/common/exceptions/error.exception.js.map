{"version":3,"sources":["../../../src/common/exceptions/error.exception.ts"],"sourcesContent":["import {\n  type ArgumentsHost,\n  Catch,\n  type ExceptionFilter,\n  Inject,\n  Injectable,\n  type WsExceptionFilter,\n} from '@nestjs/common'\nimport type { Response } from 'express'\nimport { WINSTON_MODULE_NEST_PROVIDER, type WinstonLogger } from 'nest-winston'\nimport type { Socket } from 'socket.io'\n\n@Injectable()\n@Catch()\nexport class ErrorExceptionFilter implements ExceptionFilter {\n  constructor(\n    @Inject(WINSTON_MODULE_NEST_PROVIDER)\n    private readonly logger: WinstonLogger,\n  ) {}\n\n  catch(exception: Error, host: ArgumentsHost) {\n    const ctx = host.switchToHttp()\n    const response = ctx.getResponse<Response>()\n    const request = ctx.getRequest<Request>()\n    const status = 500\n\n    const logPayload = {\n      headers: request.headers,\n      ip:\n        request.headers['x-forwarded-for'] ||\n        (request as any).connection?.remoteAddress ||\n        (request as any).socket.remoteAddress,\n      message: exception.message,\n      method: request.method,\n      stack: exception.stack,\n      type: 'HTTP_EXCEPTION',\n      url: request.url,\n    }\n\n    this.logger.error(logPayload)\n\n    response.status(status).json({\n      message: exception.message,\n      state: 'error',\n    })\n  }\n}\n\n@Injectable()\n@Catch()\nexport class WSErrorExceptionFilter implements WsExceptionFilter {\n  constructor(\n    @Inject(WINSTON_MODULE_NEST_PROVIDER)\n    private readonly logger: WinstonLogger,\n  ) {}\n\n  catch(exception: Error, host: ArgumentsHost) {\n    const client: Socket = host.switchToWs().getClient<Socket>()\n    const data = host.switchToWs().getData()\n    const ip = client.handshake?.address\n\n    const logPayload = {\n      data: data,\n      event: data?.event || 'unknown',\n      headers: client.handshake?.headers,\n      ip,\n      message: exception.message,\n      stack: exception.stack,\n      type: 'WS_EXCEPTION',\n    }\n\n    this.logger.error(logPayload)\n\n    client.emit('error', {\n      message: exception.message,\n      status: 'error',\n    })\n  }\n}\n"],"names":["ErrorExceptionFilter","WSErrorExceptionFilter","catch","exception","host","ctx","switchToHttp","response","getResponse","request","getRequest","status","logPayload","headers","ip","connection","remoteAddress","socket","message","method","stack","type","url","logger","error","json","state","client","switchToWs","getClient","data","getData","handshake","address","event","emit"],"mappings":";;;;;;;;;;;QAcaA;eAAAA;;QAoCAC;eAAAA;;;wBA3CN;6BAE0D;;;;;;;;;;;;;;;AAK1D,IAAA,AAAMD,uBAAN,MAAMA;IAMXE,MAAMC,SAAgB,EAAEC,IAAmB,EAAE;QAC3C,MAAMC,MAAMD,KAAKE,YAAY;QAC7B,MAAMC,WAAWF,IAAIG,WAAW;QAChC,MAAMC,UAAUJ,IAAIK,UAAU;QAC9B,MAAMC,SAAS;QAEf,MAAMC,aAAa;YACjBC,SAASJ,QAAQI,OAAO;YACxBC,IACEL,QAAQI,OAAO,CAAC,kBAAkB,IAClC,AAACJ,QAAgBM,UAAU,EAAEC,iBAC7B,AAACP,QAAgBQ,MAAM,CAACD,aAAa;YACvCE,SAASf,UAAUe,OAAO;YAC1BC,QAAQV,QAAQU,MAAM;YACtBC,OAAOjB,UAAUiB,KAAK;YACtBC,MAAM;YACNC,KAAKb,QAAQa,GAAG;QAClB;QAEA,IAAI,CAACC,MAAM,CAACC,KAAK,CAACZ;QAElBL,SAASI,MAAM,CAACA,QAAQc,IAAI,CAAC;YAC3BP,SAASf,UAAUe,OAAO;YAC1BQ,OAAO;QACT;IACF;IA9BA,YACE,AACiBH,MAAqB,CACtC;aADiBA,SAAAA;IAChB;AA4BL;;;;;;;;;;AAIO,IAAA,AAAMtB,yBAAN,MAAMA;IAMXC,MAAMC,SAAgB,EAAEC,IAAmB,EAAE;QAC3C,MAAMuB,SAAiBvB,KAAKwB,UAAU,GAAGC,SAAS;QAClD,MAAMC,OAAO1B,KAAKwB,UAAU,GAAGG,OAAO;QACtC,MAAMjB,KAAKa,OAAOK,SAAS,EAAEC;QAE7B,MAAMrB,aAAa;YACjBkB,MAAMA;YACNI,OAAOJ,MAAMI,SAAS;YACtBrB,SAASc,OAAOK,SAAS,EAAEnB;YAC3BC;YACAI,SAASf,UAAUe,OAAO;YAC1BE,OAAOjB,UAAUiB,KAAK;YACtBC,MAAM;QACR;QAEA,IAAI,CAACE,MAAM,CAACC,KAAK,CAACZ;QAElBe,OAAOQ,IAAI,CAAC,SAAS;YACnBjB,SAASf,UAAUe,OAAO;YAC1BP,QAAQ;QACV;IACF;IA1BA,YACE,AACiBY,MAAqB,CACtC;aADiBA,SAAAA;IAChB;AAwBL"}