{"version":3,"sources":["../../src/auth/auth.controller.ts"],"sourcesContent":["import { Body, Controller, Get, Post, Req, Res, Session, UseFilters, UseGuards } from '@nestjs/common'\nimport type { Request, Response } from 'express'\nimport type { SessionData } from 'express-session'\nimport { ErrorExceptionFilter } from '~/common/exceptions'\nimport { ZodValidationPipe } from '~/common/pipes'\nimport type { ResponseType } from '~/common/types'\nimport { type EmailService, TemplateText } from '~/email'\nimport type { AuthMessages } from './auth.constants'\nimport {\n  forgotPasswordSchema,\n  resetPasswordSchema,\n  signinSchema,\n  signupSchema,\n  updateAccountInformationSchema,\n  withIDSchema,\n} from './auth.dto'\nimport { AuthGuard } from './auth.guard'\nimport type { AuthService } from './auth.service'\nimport type {\n  ForgotPasswordDto,\n  GetUserDto,\n  ResetPasswordDto,\n  SigninDto,\n  SignupDto,\n  UpdateAccountInformationDto,\n  VerifyCodeDto,\n} from './auth.types'\n\n@Controller('auth')\n@UseFilters(ErrorExceptionFilter)\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly emailService: EmailService,\n  ) {}\n\n  @Post('signin')\n  async signin(\n    @Body(new ZodValidationPipe(signinSchema)) body: SigninDto,\n    @Session() session: SessionData,\n  ): Promise<ResponseType<Awaited<ReturnType<typeof this.authService.signin>>, typeof AuthMessages>> {\n    try {\n      console.log(session)\n      const data = await this.authService.signin(body)\n      session.user = data as never\n      // session = { ...session, user: data! }\n\n      return {\n        data,\n        message: 'AUTH_SIGNIN_SUCCESS',\n        state: 'success',\n      }\n    } catch (error) {\n      console.log(error)\n      return {\n        message: 'AUTH_SIGNIN_FAILED',\n        state: 'error',\n      }\n    }\n  }\n\n  @Post('signup')\n  async signup(\n    @Body(new ZodValidationPipe(signupSchema)) body: SignupDto,\n  ): Promise<ResponseType<Awaited<ReturnType<typeof this.authService.signup>> | Error>> {\n    const user = await this.authService.signup(body)\n\n    if (user) {\n      this.emailService.sendTestEmail({\n        subject: TemplateText.welcome.subject,\n        template: {\n          args: {\n            username: user.username,\n          },\n          name: 'welcome',\n        },\n        text: TemplateText.welcome.text,\n        to: user.email,\n      })\n    }\n\n    return { data: user, message: 'AUTH_SIGNUP_SUCCESS', state: 'success' }\n  }\n\n  @Get('signout')\n  @UseGuards(AuthGuard)\n  async signout(\n    @Req() req: Request,\n    @Res({ passthrough: true }) res: Response,\n  ): Promise<ResponseType<Awaited<null>, typeof AuthMessages>> {\n    return new Promise((resolve, reject) => {\n      req.session.destroy((err) => {\n        if (err) {\n          console.error('Session destruction error:', err)\n          reject({ message: 'Could not destroy session', state: 'error' })\n        } else {\n          res.clearCookie('connect.sid')\n          resolve({ data: null, message: 'AUTH_SIGNOUT_SUCCESS', state: 'success' })\n        }\n      })\n    })\n  }\n\n  @Get('me')\n  @UseGuards(AuthGuard)\n  async me(\n    @Body(new ZodValidationPipe(withIDSchema)) body: GetUserDto,\n  ): Promise<ResponseType<Awaited<ReturnType<typeof this.authService.getAccountInformation>>, typeof AuthMessages>> {\n    const user = await this.authService.getAccountInformation(body)\n    return { data: user, message: 'AUTH_GET_ACCOUNT_INFORMATION_SUCCESS', state: 'success' }\n  }\n\n  @Post('forgot-password')\n  async forgotPassword(\n    @Body(new ZodValidationPipe(forgotPasswordSchema)) body: ForgotPasswordDto,\n  ): Promise<ResponseType<Awaited<ReturnType<typeof this.authService.forgotPassword>>, typeof AuthMessages>> {\n    const data = await this.authService.forgotPassword(body)\n\n    if (data?.otp) {\n      this.emailService.sendTestEmail({\n        subject: TemplateText.forgot_password.subject,\n        template: {\n          args: {\n            code: data?.otp[0]?.code,\n          },\n          name: 'forgot-password',\n        },\n        text: TemplateText.forgot_password.text,\n        to: body.email,\n      })\n    }\n\n    return { data: data?.user as never, message: 'AUTH_FORGOT_PASSWORD_EMAIL_SENT', state: 'success' }\n  }\n\n  @Post('reset-password')\n  async resetPassword(\n    @Body(new ZodValidationPipe(resetPasswordSchema)) body: ResetPasswordDto,\n  ): Promise<ResponseType<Awaited<ReturnType<typeof this.authService.resetPassword>>, typeof AuthMessages>> {\n    const data = await this.authService.resetPassword(body)\n    return { data, message: 'AUTH_RESET_PASSWORD_SUCCESS', state: 'success' }\n  }\n\n  @Post('update-profile')\n  async updateAccountInformation(\n    @Body(new ZodValidationPipe(updateAccountInformationSchema)) body: UpdateAccountInformationDto,\n  ): Promise<ResponseType<Awaited<ReturnType<typeof this.authService.updateAccountInformation>>, typeof AuthMessages>> {\n    const data = await this.authService.updateAccountInformation(body)\n    return { data, message: 'AUTH_UPDATE_ACCOUNT_INFORMATION_SUCCESS', state: 'success' }\n  }\n\n  @Post('verify-code')\n  async verifyEmail(@Body(new ZodValidationPipe(withIDSchema)) body: VerifyCodeDto) {\n    const data = await this.authService.verifyCode(body)\n    return { data, state: 'success' }\n  }\n\n  @Post('delete-account')\n  async deleteAccount(\n    @Body(new ZodValidationPipe(withIDSchema)) body: GetUserDto,\n  ): Promise<ResponseType<Awaited<ReturnType<typeof this.authService.deleteAccount>>, typeof AuthMessages>> {\n    const data = await this.authService.deleteAccount(body)\n    return { data, message: 'AUTH_DELETE_ACCOUNT_SUCCESS', state: 'success' }\n  }\n}\n"],"names":["AuthController","signin","body","session","console","log","data","authService","user","message","state","error","signup","emailService","sendTestEmail","subject","TemplateText","welcome","template","args","username","name","text","to","email","signout","req","res","Promise","resolve","reject","destroy","err","clearCookie","me","getAccountInformation","forgotPassword","otp","forgot_password","code","resetPassword","updateAccountInformation","verifyEmail","verifyCode","deleteAccount","ZodValidationPipe","signinSchema","signupSchema","passthrough","withIDSchema","forgotPasswordSchema","resetPasswordSchema","updateAccountInformationSchema"],"mappings":"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"}