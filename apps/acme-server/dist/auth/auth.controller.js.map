{"version":3,"sources":["../../src/auth/auth.controller.ts"],"sourcesContent":["import { Body, Controller, Get, Post, Req, Res, Session, UseFilters, UseGuards } from '@nestjs/common'\nimport { Request, Response } from 'express'\nimport { SessionData } from 'express-session'\nimport { ErrorExceptionFilter } from '~/common/exceptions'\nimport { throwError } from '~/common/libs'\nimport { ZodValidationPipe } from '~/common/pipes'\nimport { ResponseType } from '~/common/types'\nimport { EmailService } from '~/email'\nimport { AuthError } from './auth.constants'\nimport { signinSchema, signupSchema } from './auth.dto'\nimport { AuthGuard } from './auth.guard'\nimport { AuthService } from './auth.service'\nimport { AuthErrorType, SigninDto, SignupDto } from './auth.types'\n\n@Controller('auth')\n@UseFilters(ErrorExceptionFilter)\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly emailService: EmailService,\n  ) {}\n\n  @Post('signin')\n  async signin(\n    @Body(new ZodValidationPipe(signinSchema)) body: SigninDto,\n    @Session() session: SessionData,\n    @Res({ passthrough: true }) res: Response,\n  ): Promise<ResponseType<Awaited<ReturnType<typeof this.authService.signin>>, typeof AuthError>> {\n    const data = await this.authService.signin(body)\n\n    if (data instanceof Error) {\n      throwError<AuthErrorType>('INVALID_CREDENTIALS')\n      return {\n        state: 'error',\n        error: 'INVALID_CREDENTIALS',\n        message: 'Invalid credentials',\n      }\n    }\n    session.user = data\n\n    this.emailService.sendTestEmail('wezonaser50@gmail.com')\n\n    return {\n      state: 'success',\n      data,\n    }\n  }\n\n  @Post('signup')\n  async signup(\n    @Body(new ZodValidationPipe(signupSchema)) body: SignupDto,\n  ): Promise<ResponseType<Awaited<ReturnType<typeof this.authService.signup>> | Error>> {\n    const data = await this.authService.signup(body)\n    return { state: 'success', data }\n  }\n\n  @Get('signout')\n  @UseGuards(AuthGuard)\n  async signout(@Req() req: Request, @Res({ passthrough: true }) res: Response) {\n    req.session.destroy((err) => {\n      console.log('session destroyed' + err)\n    })\n    res.clearCookie('connect.sid')\n    return { state: 'success', data: null }\n  }\n}\n"],"names":["AuthController","signin","body","session","res","data","authService","Error","throwError","state","error","message","user","emailService","sendTestEmail","signup","signout","req","destroy","err","console","log","clearCookie","ZodValidationPipe","signinSchema","passthrough","signupSchema"],"mappings":";;;;+BAgBaA;;;eAAAA;;;wBAhByE;yBACpD;gCACN;4BACS;sBACV;uBACO;uBAEL;yBAEc;2BACjB;6BACE;2BACwB;;;;;;;;;;;;;;;AAI7C,IAAA,AAAMA,iBAAN,MAAMA;IAMX,MACMC,OACJ,AAA2CC,IAAe,EAC1D,AAAWC,OAAoB,EAC/B,AAA4BC,GAAa,EACqD;QAC9F,MAAMC,OAAO,MAAM,IAAI,CAACC,WAAW,CAACL,MAAM,CAACC;QAE3C,IAAIG,gBAAgBE,OAAO;YACzBC,IAAAA,gBAAU,EAAgB;YAC1B,OAAO;gBACLC,OAAO;gBACPC,OAAO;gBACPC,SAAS;YACX;QACF;QACAR,QAAQS,IAAI,GAAGP;QAEf,IAAI,CAACQ,YAAY,CAACC,aAAa,CAAC;QAEhC,OAAO;YACLL,OAAO;YACPJ;QACF;IACF;IAEA,MACMU,OACJ,AAA2Cb,IAAe,EAC0B;QACpF,MAAMG,OAAO,MAAM,IAAI,CAACC,WAAW,CAACS,MAAM,CAACb;QAC3C,OAAO;YAAEO,OAAO;YAAWJ;QAAK;IAClC;IAEA,MAEMW,QAAQ,AAAOC,GAAY,EAAE,AAA4Bb,GAAa,EAAE;QAC5Ea,IAAId,OAAO,CAACe,OAAO,CAAC,CAACC;YACnBC,QAAQC,GAAG,CAAC,sBAAsBF;QACpC;QACAf,IAAIkB,WAAW,CAAC;QAChB,OAAO;YAAEb,OAAO;YAAWJ,MAAM;QAAK;IACxC;IA/CA,YACE,AAAiBC,WAAwB,EACzC,AAAiBO,YAA0B,CAC3C;aAFiBP,cAAAA;aACAO,eAAAA;IAChB;AA6CL;;;uCAzCcU,wBAAiB,CAACC,qBAAY;;;QAEjCC,aAAa;;;;;;;;;;;;uCAwBVF,wBAAiB,CAACG,qBAAY;;;;;;;;;;;;QAQAD,aAAa"}