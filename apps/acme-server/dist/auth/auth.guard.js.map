{"version":3,"sources":["../../src/auth/auth.guard.ts"],"sourcesContent":["import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common'\nimport { Request } from 'express'\nimport { Observable } from 'rxjs'\nimport { throwError } from '~/common/libs'\nimport { AuthErrorType } from './auth.types'\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean> {\n    if (context.switchToHttp().getRequest<Request>().session.user) return true\n    console.log(context.switchToHttp().getRequest<Request>().session)\n\n    throwError<AuthErrorType>('INVALID_CREDENTIALS')\n    return false\n  }\n}\n\n// TODO: work on this\n@Injectable()\nexport class WSAuthGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean> {\n    console.log('hay from ws guard')\n    console.log(context.switchToWs().getData())\n    // if (context.switchToWs().getData()) return true\n    // console.log(context.switchToHttp().getRequest<Request>().session)\n    //\n    // throwError<AuthErrorType>('INVALID_CREDENTIALS')\n    return false\n  }\n}\n"],"names":["AuthGuard","WSAuthGuard","canActivate","context","switchToHttp","getRequest","session","user","console","log","throwError","switchToWs","getData"],"mappings":";;;;;;;;;;;QAOaA;eAAAA;;QAYAC;eAAAA;;;wBAnB6C;sBAG/B;;;;;;;AAIpB,IAAA,AAAMD,YAAN,MAAMA;IACXE,YAAYC,OAAyB,EAAoD;QACvF,IAAIA,QAAQC,YAAY,GAAGC,UAAU,GAAYC,OAAO,CAACC,IAAI,EAAE,OAAO;QACtEC,QAAQC,GAAG,CAACN,QAAQC,YAAY,GAAGC,UAAU,GAAYC,OAAO;QAEhEI,IAAAA,gBAAU,EAAgB;QAC1B,OAAO;IACT;AACF;;;;AAIO,IAAA,AAAMT,cAAN,MAAMA;IACXC,YAAYC,OAAyB,EAAoD;QACvFK,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAACN,QAAQQ,UAAU,GAAGC,OAAO;QACxC,kDAAkD;QAClD,oEAAoE;QACpE,EAAE;QACF,mDAAmD;QACnD,OAAO;IACT;AACF"}