{"version":3,"sources":["../../src/auth/auth.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@nestjs/common'\nimport { eq } from 'drizzle-orm'\nimport { NodePgDatabase } from 'drizzle-orm/node-postgres'\nimport { WINSTON_MODULE_NEST_PROVIDER, WinstonLogger } from 'nest-winston'\nimport { uuidv7 } from 'uuidv7'\nimport { PasswordHasher, throwError } from '~/common/libs'\nimport { DrizzleAsyncProvider, schema } from '~/drizzle'\nimport { AuthErrorType, SigninSchemaType, SignupSchemaType } from './auth.types'\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(DrizzleAsyncProvider)\n    private db: NodePgDatabase<typeof schema>,\n    // @Inject(WINSTON_MODULE_NEST_PROVIDER)\n    // private readonly logger: WinstonLogger,\n  ) {}\n\n  async signin(data: SigninSchemaType): Promise<Omit<typeof schema.userTable.$inferSelect, 'password'> | Error> {\n    try {\n      const _user = await this.db.query.userTable.findFirst({\n        where: eq(schema.userTable.userName, data.username),\n      })\n      console.log(_user, data)\n\n      if (!_user) {\n        return throwError<AuthErrorType>('USERNAME_INVALID')\n      }\n\n      const passwordMatch = await PasswordHasher.comparePassword(data.password, _user.password)\n      if (!passwordMatch) {\n        return throwError<AuthErrorType>('PASSWORD_INVALID')\n      }\n\n      // omit password\n      const { password: _, ...user } = _user\n      return user\n    } catch (error) {\n      console.log(error)\n      return throwError<AuthErrorType>('SIGNIN_FAILED')\n    }\n  }\n\n  async signup(data: SignupSchemaType) {\n    try {\n      const password = await PasswordHasher.hashPassword(data.password)\n      console.log(password)\n\n      const insertedUsers = await this.db\n        .insert(schema.userTable)\n        .values({\n          id: uuidv7(),\n          // FIX: change the useranme to be name\n          name: data.username,\n          userName: data.username,\n          email: data.email,\n          password,\n        })\n        .returning()\n\n      const user = insertedUsers[0]\n      const { password: _, ...safeUser } = user\n      return safeUser\n    } catch (error) {\n      console.log(error)\n      return throwError<AuthErrorType>('REGISTRATION_FAILED')\n    }\n  }\n\n  async signout() {\n    try {\n      const users = await this.db.select().from(schema.userTable)\n      return users\n    } catch (error) {\n      console.log(error)\n      return throwError<AuthErrorType>('SIGNOUT_FAILED')\n    }\n  }\n\n  async forgotPassword() {}\n  async resetPassword() {}\n  async verifyEmail() {}\n  async deleteAccount() {}\n  async updateAccountInformation() {}\n}\n"],"names":["AuthService","signin","data","_user","db","query","userTable","findFirst","where","eq","schema","userName","username","console","log","throwError","passwordMatch","PasswordHasher","comparePassword","password","_","user","error","signup","hashPassword","insertedUsers","insert","values","id","uuidv7","name","email","returning","safeUser","signout","users","select","from","forgotPassword","resetPassword","verifyEmail","deleteAccount","updateAccountInformation"],"mappings":";;;;+BAUaA;;;eAAAA;;;wBAVsB;4BAChB;8BACY;wBAER;sBACoB;yBACE;;;;;;;;;;;;;;;AAItC,IAAA,AAAMA,cAAN,MAAMA;IAQX,MAAMC,OAAOC,IAAsB,EAA2E;QAC5G,IAAI;YACF,MAAMC,QAAQ,MAAM,IAAI,CAACC,EAAE,CAACC,KAAK,CAACC,SAAS,CAACC,SAAS,CAAC;gBACpDC,OAAOC,IAAAA,cAAE,EAACC,eAAM,CAACJ,SAAS,CAACK,QAAQ,EAAET,KAAKU,QAAQ;YACpD;YACAC,QAAQC,GAAG,CAACX,OAAOD;YAEnB,IAAI,CAACC,OAAO;gBACV,OAAOY,IAAAA,gBAAU,EAAgB;YACnC;YAEA,MAAMC,gBAAgB,MAAMC,oBAAc,CAACC,eAAe,CAAChB,KAAKiB,QAAQ,EAAEhB,MAAMgB,QAAQ;YACxF,IAAI,CAACH,eAAe;gBAClB,OAAOD,IAAAA,gBAAU,EAAgB;YACnC;YAEA,gBAAgB;YAChB,MAAM,EAAEI,UAAUC,CAAC,EAAE,GAAGC,MAAM,GAAGlB;YACjC,OAAOkB;QACT,EAAE,OAAOC,OAAO;YACdT,QAAQC,GAAG,CAACQ;YACZ,OAAOP,IAAAA,gBAAU,EAAgB;QACnC;IACF;IAEA,MAAMQ,OAAOrB,IAAsB,EAAE;QACnC,IAAI;YACF,MAAMiB,WAAW,MAAMF,oBAAc,CAACO,YAAY,CAACtB,KAAKiB,QAAQ;YAChEN,QAAQC,GAAG,CAACK;YAEZ,MAAMM,gBAAgB,MAAM,IAAI,CAACrB,EAAE,CAChCsB,MAAM,CAAChB,eAAM,CAACJ,SAAS,EACvBqB,MAAM,CAAC;gBACNC,IAAIC,IAAAA,cAAM;gBACV,sCAAsC;gBACtCC,MAAM5B,KAAKU,QAAQ;gBACnBD,UAAUT,KAAKU,QAAQ;gBACvBmB,OAAO7B,KAAK6B,KAAK;gBACjBZ;YACF,GACCa,SAAS;YAEZ,MAAMX,OAAOI,aAAa,CAAC,EAAE;YAC7B,MAAM,EAAEN,UAAUC,CAAC,EAAE,GAAGa,UAAU,GAAGZ;YACrC,OAAOY;QACT,EAAE,OAAOX,OAAO;YACdT,QAAQC,GAAG,CAACQ;YACZ,OAAOP,IAAAA,gBAAU,EAAgB;QACnC;IACF;IAEA,MAAMmB,UAAU;QACd,IAAI;YACF,MAAMC,QAAQ,MAAM,IAAI,CAAC/B,EAAE,CAACgC,MAAM,GAAGC,IAAI,CAAC3B,eAAM,CAACJ,SAAS;YAC1D,OAAO6B;QACT,EAAE,OAAOb,OAAO;YACdT,QAAQC,GAAG,CAACQ;YACZ,OAAOP,IAAAA,gBAAU,EAAgB;QACnC;IACF;IAEA,MAAMuB,iBAAiB,CAAC;IACxB,MAAMC,gBAAgB,CAAC;IACvB,MAAMC,cAAc,CAAC;IACrB,MAAMC,gBAAgB,CAAC;IACvB,MAAMC,2BAA2B,CAAC;IAxElC,YACE,AACQtC,EAAiC,CAGzC;aAHQA,KAAAA;IAGP;AAoEL"}