{"version":3,"sources":["../../src/auth/auth.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@nestjs/common'\nimport { type DrizzleError, eq } from 'drizzle-orm'\nimport type { NodePgDatabase } from 'drizzle-orm/node-postgres'\nimport otpGenerator from 'otp-generator'\nimport { PasswordHasher, throwError } from '~/common/libs'\nimport { DrizzleAsyncProvider, schema } from '~/drizzle'\nimport type { UpdateAccountInformationSchemaType } from './auth.dto'\nimport type {\n  AuthMessageType,\n  DeleteUserDto,\n  ForgotPasswordDto,\n  GetUserDto,\n  ResetPasswordDto,\n  SigninDto,\n  SignupDto,\n  VerifyCodeDto,\n} from './auth.types'\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(DrizzleAsyncProvider)\n    private db: NodePgDatabase<typeof schema>,\n    // @Inject(WINSTON_MODULE_NEST_PROVIDER)\n    // private readonly logger: WinstonLogger,\n  ) {}\n\n  async signin(data: SigninDto) {\n    try {\n      const _user = await this.db.query.users.findFirst({\n        where: eq(schema.users.username, data.username),\n      })\n\n      if (!_user) {\n        throwError<AuthMessageType>('AUTH_USERNAME_INVALID')\n        return\n      }\n\n      const passwordMatch = await PasswordHasher.comparePassword(data.password, _user.password_hash)\n      if (!passwordMatch) {\n        throwError<AuthMessageType>('AUTH_PASSWORD_INVALID')\n        return\n      }\n\n      // omit password\n      const { password_hash: _, ...user } = _user\n      return user\n    } catch (error) {\n      console.log(error)\n      throwError<AuthMessageType>('AUTH_SIGNIN_FAILED')\n      return\n    }\n  }\n\n  async signup(data: SignupDto) {\n    try {\n      const password_hash = await PasswordHasher.hashPassword(data.password)\n\n      const insertedUsers = await this.db\n        .insert(schema.users)\n        .values({\n          email: data.email,\n          first_name: data.firstName,\n          last_name: data.lastName,\n          password_hash,\n          username: data.username,\n        })\n        .returning()\n\n      if (!insertedUsers?.length) {\n        throwError<AuthMessageType>('AUTH_REGISTRATION_FAILED')\n        return\n      }\n      const user = insertedUsers[0]\n      const { password_hash: _, ...safeUser } = user\n      return safeUser\n    } catch (error) {\n      if (String((error as DrizzleError).cause).includes('user_table_user_name_unique')) {\n        throwError<AuthMessageType>('AUTH_USERNAME_ALREADY_EXISTS')\n        return\n      }\n\n      if (String((error as DrizzleError).cause).includes('user_table_email_unique')) {\n        throwError<AuthMessageType>('AUTH_EMAIL_ALREADY_EXISTS')\n        return\n      }\n\n      throwError<AuthMessageType>('AUTH_REGISTRATION_FAILED')\n    }\n  }\n\n  async getAccountInformation(data: GetUserDto) {\n    try {\n      const user = await this.db.query.users.findFirst({\n        columns: {\n          email: true,\n          first_name: true,\n          id: true,\n          last_name: true,\n        },\n        where: eq(schema.users.id, data.user_id),\n      })\n\n      if (!user) {\n        throwError<AuthMessageType>('AUTH_USER_NOT_FOUND_OR_UNAUTHORIZED')\n        return\n      }\n      return user\n    } catch (error) {\n      console.log(error)\n      throwError<AuthMessageType>('AUTH_GET_ACCOUNT_INFORMATION_FAILED')\n      return\n    }\n  }\n\n  async forgotPassword(data: ForgotPasswordDto) {\n    try {\n      const user = await this.db.query.users.findFirst({\n        where: eq(schema.users.email, data.email),\n      })\n\n      if (!user) {\n        throwError<AuthMessageType>('AUTH_USER_NOT_FOUND')\n        return\n      }\n\n      const OTP = otpGenerator.generate(6, {\n        lowerCaseAlphabets: true,\n        specialChars: true,\n        upperCaseAlphabets: true,\n      })\n\n      const expires_at = new Date(Date.now() + 60000 * 10)\n      const otp = await this.db\n        .insert(schema.otpCodes)\n        .values({\n          code: OTP,\n          user_id: user?.id,\n          ...data,\n          expires_at,\n        })\n        .returning()\n\n      if (!otp?.length) {\n        throwError<AuthMessageType>('AUTH_FORGOT_PASSWORD_FAILED')\n        return\n      }\n      return { otp, user }\n    } catch (error) {\n      console.log(error)\n      throwError<AuthMessageType>('AUTH_FORGOT_PASSWORD_FAILED')\n      return\n    }\n  }\n\n  async resetPassword(data: ResetPasswordDto) {\n    try {\n      const password_hash = await PasswordHasher.hashPassword(data.password_hash)\n      data.password_hash = password_hash\n      console.log(data)\n\n      const user = await this.db\n        .update(schema.users)\n        .set({ ...data })\n        .where(eq(schema.users.id, data.user_id))\n        .returning()\n\n      console.log(user)\n\n      if (!user?.length) {\n        throwError<AuthMessageType>('AUTH_USER_NOT_FOUND_OR_RESET_PASSWORD_FAILED')\n        return\n      }\n      return user\n    } catch (error) {\n      console.log(error)\n      throwError<AuthMessageType>('AUTH_RESET_PASSWORD_FAILED')\n      return\n    }\n  }\n\n  async updateAccountInformation({ user_id, ...data }: UpdateAccountInformationSchemaType) {\n    try {\n      const user = await this.db\n        .update(schema.users)\n        .set({ ...data })\n        .where(eq(schema.users.id, user_id))\n        .returning()\n\n      if (!user?.length) {\n        throwError<AuthMessageType>('AUTH_USER_NOT_FOUND_OR_UPDATE_ACCOUNT_INFORMATION_FAILED')\n        return\n      }\n      return user\n    } catch (error) {\n      console.log(error)\n      throwError<AuthMessageType>('AUTH_UPDATE_ACCOUNT_INFORMATION_FAILED')\n      return\n    }\n  }\n\n  async verifyCode(data: VerifyCodeDto) {\n    try {\n      const otp = await this.db.delete(schema.otpCodes).where(eq(schema.otpCodes.user_id, data.user_id)).returning()\n      console.log(otp)\n\n      if (!otp?.length) {\n        throwError<AuthMessageType>('AUTH_USER_NOT_FOUND_OR_VERIFY_CODE_FAILED')\n        return\n      }\n      return null\n    } catch (error) {\n      console.log(error)\n      throwError<AuthMessageType>('AUTH_VERIFY_CODE_FAILED')\n      return\n    }\n  }\n\n  async deleteAccount(data: DeleteUserDto) {\n    try {\n      const user = await this.db.delete(schema.users).where(eq(schema.users.id, data.user_id)).returning()\n      if (!user?.length) {\n        throwError<AuthMessageType>('AUTH_USER_NOT_FOUND_OR_DELETE_ACCOUNT_FAILED')\n        return\n      }\n      return null\n    } catch (error) {\n      console.log(error)\n      throwError<AuthMessageType>('AUTH_DELETE_ACCOUNT_FAILED')\n      return\n    }\n  }\n}\n"],"names":["AuthService","signin","data","_user","db","query","users","findFirst","where","eq","schema","username","throwError","passwordMatch","PasswordHasher","comparePassword","password","password_hash","_","user","error","console","log","signup","hashPassword","insertedUsers","insert","values","email","first_name","firstName","last_name","lastName","returning","length","safeUser","String","cause","includes","getAccountInformation","columns","id","user_id","forgotPassword","OTP","otpGenerator","generate","lowerCaseAlphabets","specialChars","upperCaseAlphabets","expires_at","Date","now","otp","otpCodes","code","resetPassword","update","set","updateAccountInformation","verifyCode","delete","deleteAccount"],"mappings":"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"}