{"version":3,"sources":["../../src/auth/auth.dto.ts"],"sourcesContent":["import { z } from 'zod'\nimport { AuthErrorType } from './auth.types'\n\nconst errorMessage = <T extends AuthErrorType>(message: T) => ({ message })\n\nexport const signinSchema = z.object({\n  username: z\n    .string()\n    .min(3, { ...errorMessage('ZOD_TOO_SHORT') })\n    .max(30, { ...errorMessage('ZOD_TOO_LONG') }),\n  password: z\n    .string()\n    .min(8, { ...errorMessage('ZOD_TOO_SHORT') })\n    .max(30, { ...errorMessage('ZOD_TOO_LONG') }),\n})\n\nexport const signupSchema = z.object({\n  email: z.string().email({ ...errorMessage('ZOD_INVALID') }),\n  username: z\n    .string()\n    .min(3, { ...errorMessage('ZOD_TOO_SHORT') })\n    .max(30, { ...errorMessage('ZOD_TOO_LONG') }),\n  password: z\n    .string()\n    .min(8, { ...errorMessage('ZOD_TOO_SHORT') })\n    .max(30, { ...errorMessage('ZOD_TOO_LONG') }),\n})\n"],"names":["signinSchema","signupSchema","errorMessage","message","z","object","username","string","min","max","password","email"],"mappings":";;;;;;;;;;;QAKaA;eAAAA;;QAWAC;eAAAA;;;qBAhBK;AAGlB,MAAMC,eAAe,CAA0BC,UAAgB,CAAA;QAAEA;IAAQ,CAAA;AAElE,MAAMH,eAAeI,MAAC,CAACC,MAAM,CAAC;IACnCC,UAAUF,MAAC,CACRG,MAAM,GACNC,GAAG,CAAC,GAAG;QAAE,GAAGN,aAAa,gBAAgB;IAAC,GAC1CO,GAAG,CAAC,IAAI;QAAE,GAAGP,aAAa,eAAe;IAAC;IAC7CQ,UAAUN,MAAC,CACRG,MAAM,GACNC,GAAG,CAAC,GAAG;QAAE,GAAGN,aAAa,gBAAgB;IAAC,GAC1CO,GAAG,CAAC,IAAI;QAAE,GAAGP,aAAa,eAAe;IAAC;AAC/C;AAEO,MAAMD,eAAeG,MAAC,CAACC,MAAM,CAAC;IACnCM,OAAOP,MAAC,CAACG,MAAM,GAAGI,KAAK,CAAC;QAAE,GAAGT,aAAa,cAAc;IAAC;IACzDI,UAAUF,MAAC,CACRG,MAAM,GACNC,GAAG,CAAC,GAAG;QAAE,GAAGN,aAAa,gBAAgB;IAAC,GAC1CO,GAAG,CAAC,IAAI;QAAE,GAAGP,aAAa,eAAe;IAAC;IAC7CQ,UAAUN,MAAC,CACRG,MAAM,GACNC,GAAG,CAAC,GAAG;QAAE,GAAGN,aAAa,gBAAgB;IAAC,GAC1CO,GAAG,CAAC,IAAI;QAAE,GAAGP,aAAa,eAAe;IAAC;AAC/C"}