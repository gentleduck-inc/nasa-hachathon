{"version":3,"sources":["../../src/auth/auth.dto.ts"],"sourcesContent":["import { z } from 'zod'\nimport type { AuthMessageType } from './auth.types'\nconst errorMessage = <T extends AuthMessageType>(message: T) => ({ message })\n\nconst string = z\n  .string({ ...errorMessage('ZOD_EXPECTED_STRING') })\n  .min(8, { ...errorMessage('ZOD_TOO_SHORT') })\n  .max(30, { ...errorMessage('ZOD_TOO_LONG') })\n\nexport const signinSchema = z.object({\n  password: string,\n  username: string,\n})\nexport type SignupSchemaType = z.infer<typeof signupSchema>\n\nexport const signupSchema = signinSchema.extend({\n  email: z.string({ ...errorMessage('ZOD_EXPECTED_STRING') }).email({ ...errorMessage('ZOD_INVALID') }),\n  firstName: string.min(3, { ...errorMessage('ZOD_TOO_SHORT') }),\n  lastName: string.min(3, { ...errorMessage('ZOD_TOO_SHORT') }),\n  username: string.min(3, { ...errorMessage('ZOD_TOO_SHORT') }),\n})\nexport type SigninSchemaType = z.infer<typeof signinSchema>\n\nexport const withIDSchema = z.object({\n  user_id: z.string({ ...errorMessage('ZOD_EXPECTED_STRING') }),\n})\nexport type WithIDSchemaType = z.infer<typeof withIDSchema>\n\nexport const forgotPasswordSchema = signupSchema.pick({ email: true })\nexport type forgotPasswordSchemaType = z.infer<typeof forgotPasswordSchema>\n\nexport const resetPasswordSchema = withIDSchema.extend({\n  password_hash: string,\n})\nexport type ResetPasswordSchemaType = z.infer<typeof resetPasswordSchema>\n\nexport const updateAccountInformationSchema = withIDSchema.merge(signupSchema.partial())\nexport type UpdateAccountInformationSchemaType = z.infer<typeof updateAccountInformationSchema>\n\nexport const verifyCodeSchema = resetPasswordSchema.omit({ password_hash: true }).extend({\n  otp: z.string({ ...errorMessage('ZOD_EXPECTED_STRING') }).min(6, { ...errorMessage('ZOD_TOO_SHORT') }),\n})\nexport type VerifyCodeSchemaType = z.infer<typeof verifyCodeSchema>\n"],"names":["forgotPasswordSchema","resetPasswordSchema","signinSchema","signupSchema","updateAccountInformationSchema","verifyCodeSchema","withIDSchema","errorMessage","message","string","z","min","max","object","password","username","extend","email","firstName","lastName","user_id","pick","password_hash","merge","partial","omit","otp"],"mappings":";;;;;;;;;;;QA4BaA;eAAAA;;QAGAC;eAAAA;;QAtBAC;eAAAA;;QAMAC;eAAAA;;QAqBAC;eAAAA;;QAGAC;eAAAA;;QAhBAC;eAAAA;;;qBAvBK;AAElB,MAAMC,eAAe,CAA4BC,UAAgB,CAAA;QAAEA;IAAQ,CAAA;AAE3E,MAAMC,SAASC,MAAC,CACbD,MAAM,CAAC;IAAE,GAAGF,aAAa,sBAAsB;AAAC,GAChDI,GAAG,CAAC,GAAG;IAAE,GAAGJ,aAAa,gBAAgB;AAAC,GAC1CK,GAAG,CAAC,IAAI;IAAE,GAAGL,aAAa,eAAe;AAAC;AAEtC,MAAML,eAAeQ,MAAC,CAACG,MAAM,CAAC;IACnCC,UAAUL;IACVM,UAAUN;AACZ;AAGO,MAAMN,eAAeD,aAAac,MAAM,CAAC;IAC9CC,OAAOP,MAAC,CAACD,MAAM,CAAC;QAAE,GAAGF,aAAa,sBAAsB;IAAC,GAAGU,KAAK,CAAC;QAAE,GAAGV,aAAa,cAAc;IAAC;IACnGW,WAAWT,OAAOE,GAAG,CAAC,GAAG;QAAE,GAAGJ,aAAa,gBAAgB;IAAC;IAC5DY,UAAUV,OAAOE,GAAG,CAAC,GAAG;QAAE,GAAGJ,aAAa,gBAAgB;IAAC;IAC3DQ,UAAUN,OAAOE,GAAG,CAAC,GAAG;QAAE,GAAGJ,aAAa,gBAAgB;IAAC;AAC7D;AAGO,MAAMD,eAAeI,MAAC,CAACG,MAAM,CAAC;IACnCO,SAASV,MAAC,CAACD,MAAM,CAAC;QAAE,GAAGF,aAAa,sBAAsB;IAAC;AAC7D;AAGO,MAAMP,uBAAuBG,aAAakB,IAAI,CAAC;IAAEJ,OAAO;AAAK;AAG7D,MAAMhB,sBAAsBK,aAAaU,MAAM,CAAC;IACrDM,eAAeb;AACjB;AAGO,MAAML,iCAAiCE,aAAaiB,KAAK,CAACpB,aAAaqB,OAAO;AAG9E,MAAMnB,mBAAmBJ,oBAAoBwB,IAAI,CAAC;IAAEH,eAAe;AAAK,GAAGN,MAAM,CAAC;IACvFU,KAAKhB,MAAC,CAACD,MAAM,CAAC;QAAE,GAAGF,aAAa,sBAAsB;IAAC,GAAGI,GAAG,CAAC,GAAG;QAAE,GAAGJ,aAAa,gBAAgB;IAAC;AACtG"}